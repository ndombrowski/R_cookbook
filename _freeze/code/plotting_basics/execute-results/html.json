{
  "hash": "d326d514dcc5c736215bb18cde4ecf99",
  "result": {
    "markdown": "---\nexecute:\n    eval: true\n\ndf-print: paged\n---\n\n\n# Basic plotting\n\n\n::: {.cell}\n\n:::\n\n\n## Using base R\n\n### Scatter plots\n\nThe examples below are part of base R, i.e. we can plot without using any packages.\nHowever, there are some nice packages that let you control a lot of parameters, which are good to learn for more sophisticates plots.\n\nPlotting in base R is simple, we just need to define, what we plot against the x- and y-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lets plot our root length against our shoot weight\nx <- growth_data$FW_shoot_mg\ny <- growth_data$Rootlength\n\nplot(x, y)\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNow, lets add some more axis labels to make it more informative and lets startt the plot at 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lets plot our root length against our shoot weight\nx <- growth_data$FW_shoot_mg\ny <- growth_data$Rootlength\n\nplot(x, y, xlab = \"Shoot_weight_mg\", ylab = \"Rootlength_cm\", ylim = c(0, 15), xlim = c(0, 50))\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nA useful thing to know is that you can add plots together, i.e. we can add a regression line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#lets do the stats running a linear model (lm)\nlm(growth_data$Rootlength ~ growth_data$FW_shoot_mg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = growth_data$Rootlength ~ growth_data$FW_shoot_mg)\n\nCoefficients:\n            (Intercept)  growth_data$FW_shoot_mg  \n                 5.2912                   0.2465  \n```\n:::\n:::\n\n\nHere, the intercept is 5.2912 and the slope is 0.2465 .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lets plot our root length against our shoot weight\nx <- growth_data$FW_shoot_mg\ny <- growth_data$Rootlength\n\n#plot\nplot(x, y, xlab = \"Shoot_weight_mg\", ylab = \"Rootlength_cm\", ylim = c(0, 15), xlim = c(0, 50))\n\n#add the info from ln (both lines of code do the same thing)\nabline(lm(growth_data$Rootlength ~ growth_data$FW_shoot_mg))\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWe can even add the stats, but therefore we need to prepare the stats a bit better:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#to stats\nmodl = lm(growth_data$Rootlength ~ growth_data$FW_shoot_mg)\n\n#get summary\nmodsum = summary(modl)\n\n#get R2\nr2 = modsum$adj.r.squared\n\n#look at the coefficients\nmodsum$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         Estimate Std. Error  t value     Pr(>|t|)\n(Intercept)             5.2912436 0.30469198 17.36588 2.278273e-32\ngrowth_data$FW_shoot_mg 0.2464783 0.01711628 14.40023 2.039703e-26\n```\n:::\n\n```{.r .cell-code}\n#get the p-value (its in the coefficient table, in the 2nd row and 4th column)\nmy.p = modsum$coefficients[2,4]\n```\n:::\n\n\nNow we can plot this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#add a label, in which we store the text we want to add\nmylabel = bquote(italic(R)^2 == .(format(r2, digits = 3)))\n\n#plot\nplot(x, y, xlab = \"Shoot_weight_mg\", ylab = \"Rootlength_cm\", ylim = c(0, 15), xlim = c(0, 50))\n\n#add the info from ln (both lines of code do the same thing)\nabline(lm(growth_data$Rootlength ~ growth_data$FW_shoot_mg))\n\n#add the text\ntext(x = 45, y =14, labels = mylabel)\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nIf we want to add the other value, it gets a bit more complicated esp. if we want to have first the R2 and then, in a new line, the p-value.\n\nFor this, lets first prepare a new label\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#make an empty vecotr\nrp = vector('expression',2)\nrp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nexpression(NULL, NULL)\n```\n:::\n\n```{.r .cell-code}\n#add our two values into the vector\nrp[1] = substitute(expression(italic(R)^2 == MYVALUE), \n\t\tlist(MYVALUE = format(r2,dig=3)))[2]\n\nrp[2] = substitute(expression(italic(p) == MYOTHERVALUE), \n\t\tlist(MYOTHERVALUE = format(my.p, digits = 2)))[2]\n\nrp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nexpression(italic(R)^2 == \"0.665\", italic(p) == \"2e-26\")\n```\n:::\n:::\n\n\nLets plot this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot\nplot(x, y, xlab = \"Shoot_weight_mg\", ylab = \"Rootlength_cm\", ylim = c(0, 15), xlim = c(0, 50))\n\n#add the info from ln (both lines of code do the same thing)\nabline(lm(growth_data$Rootlength ~ growth_data$FW_shoot_mg))\n\n#add the text as a legend and remove the border with bty\nlegend(\"topright\", legend = rp, bty = 'n')\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### Lineplots\n\nNow, lets work with our time course data to draw some line plots. I.e. lineplots are ideal if we have measurements over time. \n\nLets first summarize our time course data to make it easier to plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:plyr':\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise,\n    summarize\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:kableExtra':\n\n    group_rows\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\n#first filter to only print P data, then summarize the data by condition and timepoint and calculate the mean\ntimecourse_summary <- timecourse_noNA %>% \n    filter(Nutrient == \"P\")  %>% \n    group_by(Condition, Timepoint) %>%  \n    summarise(mean_root = mean(Rootlength))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Condition'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nhead(timecourse_summary)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Condition\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Timepoint\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"mean_root\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"350\",\"2\":\"t0\",\"3\":\"1.521533\"},{\"1\":\"350\",\"2\":\"t1\",\"3\":\"2.328333\"},{\"1\":\"350\",\"2\":\"t2\",\"3\":\"3.851552\"},{\"1\":\"350\",\"2\":\"t3\",\"3\":\"5.717783\"},{\"1\":\"350\",\"2\":\"t4\",\"3\":\"9.387750\"},{\"1\":\"350\",\"2\":\"t5\",\"3\":\"11.221909\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#split the data into our two categories\ntimecourse_summary_Control <- timecourse_summary[timecourse_summary$Condition == 'MgCl',]\ntimecourse_summary_350 <- timecourse_summary[timecourse_summary$Condition == '350',]\n```\n:::\n\n\nUseful comments:\n\n* type= It controls the type (p for points, l for lines, b for both,<e2><80><a6>).\n* pch= integer [0,25]. Controls the plot symbol.\n* log= It causes the x axis x, y axis y or both xy to be logarithmic.\n* xlab=, ylab= string, labels for the x and y axis, respectively.\n* xlim=, ylim= length 2 vector, x-axis, y-axis limits.\n* main= string, title of the plot.\n* col = hexadecimal or string, colour of the points/lines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0:5\ny <- timecourse_summary_Control$mean_root\n\nplot(x, y, type = \"b\", pch = 19, xlab = \"Timepoints\", ylab = \"Rootlength (cm)\", col = \"#7700BB\", main = \"Growth measurements\")\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nplot() always overwrites the content for the current graphics window. \n\nTo add elements to an existing plot, one can use points, lines, abline, text, <e2><80><a6>\nWe can also add a legend to the plot. \n\nIn the previous graph eith out growth measurements let us add the root growth of our microbe treatment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0:5\ny <- timecourse_summary_Control$mean_root\nz <- timecourse_summary_350$mean_root\n\nplot(x, y, type = \"b\", pch = 19, xlab = \"Timepoints\", ylab = \"Rootlength (cm)\",col = \"#7700BB\", ylim = c(0, 15), main = \"Growth measurements\")\nlines(x, z, type = \"b\", col = \"#5555DD\")\nlegend(\"topright\", c(\"control\", \"microbe\"), col = c(\"#7700BB\", \"#5555DD\"),pch = c(19, 1))\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nWe can see nicely, that our roots grow longer past the 3rd timepoint.\n\n## info on using par\n\nTo change graphical parameters globally you can use par. R allows for n <c3><97> m figures in a single page, by adjusting the parameter mfrow:\n\n- mfrow = c(3, 1) --> we have 3 plots distributed across 3 rows and one column\n- par(mai = c(2, 0.82, 0.82, 0.42)) --> sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. If we change the margins it is recommended to reset them to the default after plotting with ``par(mai = c(1.02, 0.82, 0.82, 0.42))``. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(n, m)) # n: number of figures in rows, m: ... in columns.\nplot(x1, y1)\nplot(x1, y2)\n...\nplot(xn, ym)\n\n#save a file\npng(\"../output_examples/filename.png\")\nplot(x, y)\ndev.off()\n```\n:::\n\n\nIn the above code chunk, you first open a png file, then plot directly to that file, and finally explicitly close\nthe plotting device with dev.off(). Thus, you do not see the plot on the graphics window. The Cairo\npackage is supposed to be superior to these basic plotting functions, but it does not come with the base\ninstallation of R, therefore you will have to install it to try it out (if you are interested, or at a later time).\n\n\n### Printing our results using par\n\nNow lets generate a png file plot.png containing three plots in three different rows.\n\n- The data for our control treatment\n- The data for our microbe treatment\n- The data combined in one plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0:5\ncontrol <- timecourse_summary_Control$mean_root\nMicrobe <- timecourse_summary_350$mean_root\n\n#define what we want to print\npng(\"../output_examples/filename2.png\", width = 240, height = 480)\n\n#define how we want to order our 3 plots into rows and columns\npar(mfrow = c(3, 1)) \n\n#build plot1\nplot(x, control, type = \"b\", pch = 19, xlab = \"Timepoints\", ylab = \"Rootlength (cm)\",col = \"#7700BB\", main = \"Growth measurements\")\n\n#build plot2\nplot(x, Microbe, type = \"b\", pch = 19, xlab = \"Timepoints\", ylab = \"Rootlength (cm)\",col = \"#5555DD\", main = \"Growth measurements\")\n\n#build plot3\nplot(x, control, type = \"b\", pch = 19, xlab = \"Timepoints\", ylab = \"Rootlength (cm)\",col = \"#7700BB\", ylim = c(0, 15), main = \"Growth measurements\")\nlines(x, Microbe, type = \"b\", col = \"#5555DD\")\nlegend(\"topright\", c(\"control\", \"microbe\"), col = c(\"#7700BB\", \"#5555DD\"),pch = c(19, 1))\n\n#closes the specified plot\ndev.off()\n```\n:::\n\n\n\n\n## Histograms\n\nA histogram shows the frequency of data values in equally sized intervals. Density plots are an alternative, but because of the\nsmoothing between data points, histograms provide a more <e2><80><98>natural<e2><80><99> look at your data. If you are interested\nin how to make a density plot, look at the help page of density.\n\nAs an example, lets plot the distribution of our root length measurements across our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(growth_data[, \"Rootlength\"], cex = 0.6, main = \"Data distribution\", breaks = 10, density = 100, col = \"lightblue\", border = \"darkblue\", xlab = \"Rootlength\", labels =T)\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Boxplots\n\nBoxplots represent a compact summary of a data vector in graphical form. \n\nAs we<e2><80><99>ve already seen above, the function summary returns summary statistics on the command line: the minimum, first quartile, mean,\nmedian, third quartile and the maximum. \n\nThe boxplot displays these values graphically (except the mean) as follows:\n\n- the thick line in the middle of the box represents the median, \n- the lower bound of the box the first quartile and the upper bound the third quartile. Thus, 50% of the data are within the range of the box. \n- The whiskers (thin lines below and above the box) represent the minimum and maximum. \n- Points more extreme than the min. and max. are considered outliers and the help page describes how they are defined. \n\nWe will first make a boxplot of all measurements and then check for differences between the two nutrient conditions.. Play around with the parameters and add colors and labels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# all data\nboxplot(growth_data$Rootlength, cex = 0.8,  ylab = \"Root length (cm)\")\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# data by nutrient condition\nboxplot(growth_data$Rootlength ~ growth_data$Nutrient, las = 2, cex = 0.8, ylab = \"Root length (cm)\")\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# data by nutrient and growth condition\nboxplot(growth_data$Rootlength ~ growth_data$Nutrient * growth_data$Condition, las = 2, cex = 0.8, ylab = \"Root length (cm)\")\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Ggplot2\n\nGplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.\n\nDetailed info can be found here: https://ggplot2.tidyverse.org\n\nOne important difference to basic plots is that argument can be given in separate blocks that are separated by a ``+``\n\n#### Start with a basic bargraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n#make a bargraph\nmyplot <-\n  ggplot(growth_data, aes(x =Nutrient, y = Rootlength)) +  #here we provide the dimensions of our plot\n  geom_bar(stat=\"identity\")                                   #here, we say what kind of plot we want \n\nmyplot\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nWe see that the default behavior is to sum everything, which is not what we want. Luckily switching different graph types is very quick\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#make a boxplot instead of bargrpah\nmyplot <-\n  ggplot(growth_data, aes(x =Nutrient, y = Rootlength)) +  \n  geom_boxplot()                                   \n\nmyplot\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#do a histogram\nmyplot <-\n  ggplot(growth_data, aes(Rootlength)) +  \n  geom_histogram()                                   \n\nmyplot\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nThe only thing we might want to watch out for is that depending on what data we plot the astethics might need to be adopted. I.e. for a histogram there is no need to provide a x and y value, but we only need to define for what data we want to plot a histogram.\n\nAnother useful feature is to add colors by groupings, i.e. nutrient conditions, using the fill option.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot <-\n  ggplot(growth_data, aes(x =Nutrient, y = Rootlength, fill = Nutrient)) +  \n  geom_boxplot()                                   \n\nmyplot\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n#### Prettify\n\nBy default the basic design of a ggplot2 is not ready for publication but we can control every aspects to make it look nicer. A cheat sheet for all the options can be found [here](http://zevross.com/blog/2014/08/04/beautiful-plotting-in-r-a-ggplot2-cheatsheet-3/) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot <-\n  ggplot(growth_data, aes(x =Nutrient, y = Rootlength, fill = Nutrient)) +  \n  geom_boxplot()  +                                 \n  scale_fill_manual(values=c(\"black\", \"grey\")) +                                          #add some other colors\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 16)) +                               #make the axis start at 0 \n  theme_bw() +                                                                            #remove the grey background\n  ylab(\"Root length (cm)\") +                                                              #change the label for the y-axis\n  xlab(\"\") +                                                                              #remove the label for the x axis\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),           #modify the grid lines\n        panel.background = element_blank(), axis.line = element_line(colour = \"black\")) +\n  theme(legend.position=\"right\",                                                          #move the legend around\n        axis.text.x=element_text(angle=45,hjust = 1, size=12))                            #control size and orientation of the axis labels\n\nmyplot\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n#### Sort data\n\nBy default most programs sort alpha in an alphabetical way. We can reorder this using vectors (which we can write ourselves or use a mapping file to create them)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#reorder the nutrient levels in our factors\ngrowth_data$Nutrient2 <-  factor(growth_data$Nutrient, levels = c(\"P\", \"noP\")) \n\n#plot in our new order\nmyplot <-\n  ggplot(growth_data, aes(x =Nutrient2, y = Rootlength, fill = Nutrient)) +  \n  geom_boxplot()\n\nmyplot\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n#### Printing data\n\nWith ``pdf()`` we tell R that we want to print something to our computer. Inside the function we can define the name of the pdf to generate, the size and other things. After adding the plot we want to print it is important to run ``dev.off()`` in order to tell R to stop the \"printing mode\" and go back to the default mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#lets first generate two plots\nmyplot_root <-\n  ggplot(growth_data, aes(x =Nutrient2, y = Rootlength, fill = Nutrient)) +  \n  geom_boxplot()\n\nmyplot_shoot <-\n  ggplot(growth_data, aes(x =Nutrient2, y = FW_shoot_mg, fill = Nutrient)) +  \n  geom_boxplot()\n\n#plot one graph\npdf(\"../output_examples/Plot_root_length.pdf\", width=3, height=3, family  = \"Times\")\nmyplot_root\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n\n\n#### Combining and printing multiple plots\n\nThe ggpubr package is nice to combine multiple plots onto one plot. \nSome more information on this package can be found [here](https://rpkgs.datanovia.com/ggpubr/index.html)\n\nHow it works:\n\n- First list the plots we want to print\n- the labels argument allows us to add labels\n- the ncol and nrow arguments allow us to control how many plots go into a row and a column\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#load package\nlibrary(ggpubr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ggpubr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:plyr':\n\n    mutate\n```\n:::\n\n```{.r .cell-code}\n#view how ggarrange deals with two plots\nggarrange(myplot_root, myplot_shoot, \n          labels = c(\"A\", \"B\"),\n          ncol = 2, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#we can also plot two graphs and print them in one pdf\npdf(\"../output_examples/Two_plots.pdf\", width=3, height=3, family  = \"Times\")\nggarrange(myplot_root, myplot_shoot, \n          labels = c(\"A\", \"B\"),\n          ncol = 2, nrow = 1)\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n\n\n\n#### Sorting data v2\n\nIf we have multiple conditions, i.e. nutrient conditions and other treatments there are several ways to plot these\n\n1. Plot them side by side and color by nutrient conditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pdf(\"Plot_root_length.pdf\", width=3, height=3, family  = \"Times\")\n  ggplot(growth_data, aes(x =SampleID, y = Rootlength, fill = Nutrient)) +  \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#dev.off()\n```\n:::\n\n\n2. Change the order.\n\nNow, here the order is not nice, but as mentioned we can use mapping files to sort our data. Lets try.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#lets check how our mapping file looked like\nkable((mapping_file), format='markdown')\n```\n\n::: {.cell-output-display}\n|   |SampleID |Nutrient |Condition |\n|:--|:--------|:--------|:---------|\n|1  |noP      |noP      |MgCl      |\n|14 |noP_101  |noP      |Strain101 |\n|27 |noP_230  |noP      |Strain230 |\n|38 |noP_28   |noP      |Strain28  |\n|53 |P        |P        |MgCl      |\n|68 |P_101    |P        |Strain101 |\n|80 |P_230    |P        |Strain230 |\n|93 |P_28     |P        |Strain28  |\n:::\n:::\n\n\nWe can use this simpler table to define how we want to resort our growth data. First, lets reorder the metadata first by nutrient and then condition:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#lets sort the file first conditon an the nutrient (in reverse order, by using the rev() function )\nmapping_file <- mapping_file[with(mapping_file, order(Condition, rev(Nutrient))), ]\n\n#check whether we like how things are ordered (look at the order of the first line)\nmapping_file$SampleID\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"noP\"     \"P\"       \"noP_101\" \"P_101\"   \"noP_230\" \"P_230\"   \"noP_28\" \n[8] \"P_28\"   \n```\n:::\n:::\n\n\nNow, we can use the order of this file to re-order our larger dataframe with the growth data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#reorder the levels of our growth data using the mapping file\ngrowth_data$SampleID2 <-  factor(growth_data$SampleID, levels = as.character(mapping_file$SampleID)) \nhead(growth_data)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"SampleID\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Nutrient\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Condition\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"FW_shoot_mg\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Rootlength\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nutrient2\"],\"name\":[6],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"SampleID2\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"noP\",\"2\":\"noP\",\"3\":\"MgCl\",\"4\":\"10.26\",\"5\":\"5.931015\",\"6\":\"noP\",\"7\":\"noP\",\"_rn_\":\"1\"},{\"1\":\"noP\",\"2\":\"noP\",\"3\":\"MgCl\",\"4\":\"6.52\",\"5\":\"5.743447\",\"6\":\"noP\",\"7\":\"noP\",\"_rn_\":\"2\"},{\"1\":\"noP\",\"2\":\"noP\",\"3\":\"MgCl\",\"4\":\"12.17\",\"5\":\"6.834720\",\"6\":\"noP\",\"7\":\"noP\",\"_rn_\":\"3\"},{\"1\":\"noP\",\"2\":\"noP\",\"3\":\"MgCl\",\"4\":\"11.37\",\"5\":\"6.742735\",\"6\":\"noP\",\"7\":\"noP\",\"_rn_\":\"4\"},{\"1\":\"noP\",\"2\":\"noP\",\"3\":\"MgCl\",\"4\":\"9.80\",\"5\":\"6.736886\",\"6\":\"noP\",\"7\":\"noP\",\"_rn_\":\"5\"},{\"1\":\"noP\",\"2\":\"noP\",\"3\":\"MgCl\",\"4\":\"3.75\",\"5\":\"4.236348\",\"6\":\"noP\",\"7\":\"noP\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#plot (for now lets do this side by side)\n  ggplot(growth_data, aes(x =SampleID2, y = Rootlength, fill = Nutrient)) +  \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n#### Bargraphs with error bars\n\nFor bargraphs we can also make them nice looking with errorbars, however, the values for the mean, sd and so one ideally should be listed in a summary table. \n\nLuckily we have learned before how we can use ddply to create such a table again and then blot it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#summarize\ngrowth_data_summarized <- ddply(growth_data, .(SampleID, Nutrient), summarize, RootLength = mean(Rootlength), sd = sd (Rootlength), se = sd(Rootlength) / sqrt((length(Rootlength))))\n\n#order levels\ngrowth_data_summarized$SampleID2 <-  factor(growth_data_summarized$SampleID, levels = as.character(mapping_file$SampleID)) \n\n#plot\n  ggplot(growth_data_summarized, aes(x=SampleID2, y=RootLength, fill=Nutrient)) + \n  geom_bar(stat=\"identity\", color=\"black\", \n           position=position_dodge()) +\n  geom_errorbar(aes(ymin=RootLength-sd, ymax=RootLength+sd), width=.2,\n                 position=position_dodge(.9)) \n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n#### Faceting data\n\nSometimes, we might to plot data into separate plots. This can be done in ggplot with one extra command. Facetting can do this for you.\n\nOptions:\n- Scales \"free\" tells ggplot that the scales can be different between plots. I.e. axis height.\n- ncol = allows to control the dimensions of the plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot horizontal\n  ggplot(growth_data, aes(x =SampleID2, y = Rootlength, fill = Nutrient)) +  \n  geom_boxplot() +\n  facet_wrap(. ~ Nutrient, scales = \"free\", ncol = 2)\n```\n\n::: {.cell-output-display}\n![](plotting_basics_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "plotting_basics_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}